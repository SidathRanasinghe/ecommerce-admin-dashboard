generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders     Order[]
  sizes      Size[]
  billboards Billboard[]
  categories Category[]
  products   Product[]
}

model Billboard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String     @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  categories Category[]
  store      Store      @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  billboardId String   @db.ObjectId

  products  Product[]
  billboard Billboard @relation(fields: [billboardId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  storeId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String

  products Product[]
  store    Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String   @db.ObjectId
  categoryId String   @db.ObjectId
  name       String
  price      Float
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderItems OrderItem[]
  images     Image[]
  size       Size        @relation(fields: [sizeId], references: [id])
  store      Store       @relation(fields: [storeId], references: [id])
  category   Category    @relation(fields: [categoryId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  url       String
  updatedAt DateTime @updatedAt
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orderItems OrderItem[]
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([productId])
}
